//ques 1

#include <iostream>
#include <stack>
#include <vector>
using namespace std;

int calPoints(vector<string>& operations) {
    stack<int> st;
    for (const string& op : operations) {
        if (op == "C") {
            st.pop();
        } else if (op == "D") {
            st.push(st.top() * 2);
        } else if (op == "+") {
            int top = st.top();
            st.pop();
            int newTop = st.top() + top;
            st.push(top);
            st.push(newTop);
        } else {
            st.push(stoi(op));
        }
    }

    int total = 0;
    while (!st.empty()) {
        total += st.top();
        st.pop();
    }
    
    return total;
}

int main() {
    vector<string> operations = {"5", "2", "C", "D", "+"};
    cout << calPoints(operations) << endl;  // Output: 30
    return 0;
}


//ques 2

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* removeNodes(ListNode* head, int val) {
    // Create a dummy node to handle edge cases
    ListNode* dummy = new ListNode(0);
    dummy->next = head;
    ListNode* current = dummy;
    
    while (current->next) {
        if (current->next->val == val) {
            current->next = current->next->next;  // Remove node
        } else {
            current = current->next;  // Move to next node
        }
    }
    
    return dummy->next;
}

void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(6);
    head->next->next->next = new ListNode(3);
    head->next->next->next->next = new ListNode(4);
    head->next->next->next->next->next = new ListNode(5);
    head->next->next->next->next->next->next = new ListNode(6);
    
    int val = 6;
    ListNode* newHead = removeNodes(head, val);
    printList(newHead);  // Output: 1 2 3 4 5
    return 0;
}


//ques 3

#include <iostream>
#include <vector>
#include <stack>
using namespace std;

int maximalRectangle(vector<vector<char>>& matrix) {
    if (matrix.empty()) return 0;
    
    int n = matrix.size(), m = matrix[0].size();
    vector<int> heights(m, 0);
    int maxArea = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            heights[j] = (matrix[i][j] == '1') ? heights[j] + 1 : 0;
        }
        
        stack<int> st;
        for (int j = 0; j <= m; j++) {
            while (!st.empty() && (j == m || heights[j] < heights[st.top()])) {
                int h = heights[st.top()];
                st.pop();
                int width = (st.empty()) ? j : j - st.top() - 1;
                maxArea = max(maxArea, h * width);
            }
            st.push(j);
        }
    }
    
    return maxArea;
}

int main() {
    vector<vector<char>> matrix = {
        {'1', '0', '1', '0', '0'},
        {'1', '0', '1', '1', '1'},
        {'1', '1', '1', '1', '1'},
        {'1', '0', '0', '1', '0'}
    };
    
    cout << maximalRectangle(matrix) << endl;  // Output: 6
    return 0;
}
